name: Production release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      description:
        required: true
        
permissions:
  id-token: write
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      version: ${{ github.event.inputs.version }}
    environment:
      name: production
      url: https://pizza.missinginfo.me
    steps:
    - name: Create OIDC token to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}
  
    - name: Update the cloudfront distribution
      run: |
        # Get the current distribution and update it to use the new version
        aws cloudfront get-distribution-config --id ${{ secrets.DISTRIBUTION_ID }} > original.json
        etag=$(jq -r '.ETag' original.json)
        jq '.DistributionConfig' original.json > request.json
        jq --arg version "/$version" '.Origins.Items[0].OriginPath = $version' request.json > finalRequest.json
        aws cloudfront update-distribution --id ${{ secrets.DISTRIBUTION_ID }} --if-match $etag --distribution-config file://finalRequest.json
  
        # Wait for the distribution to deploy and then invalidate the cache
        while [ "$(aws cloudfront get-distribution --id ${{ secrets.DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)" != "Deployed" ]; do echo "Distribution is still updating..."; sleep 5; done
        aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"
  
    - name: Create production release
      uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5
      with:
        tag: production-version-${{ env.version }}
        name: Production ${{ env.version }}
        allowUpdates: true
        generateReleaseNotes: true
        makeLatest: true
        body: |
          ## ðŸš€ Description
  
          ${{ github.event.inputs.description }}
    - name: Annotate deployment in Grafana
      run: |
        curl -s -X POST https://missinginfo.grafana.net/api/annotations -H "Authorization: Bearer ${{ secrets.GRAFANA_ACCESS_TOKEN }}" -H "Content-Type:application/json" -d '{"dashboardUID":"cegofhewl3x8gf", "panelId":2, "tags":["frontend","production"], "text":"Version '"$version"' deployed" }'
    - name: Run Dastardly Action Step
      uses: PortSwigger/dastardly-github-action@main
      with:
        target-url: 'https://pizza.missinginfo.me'

